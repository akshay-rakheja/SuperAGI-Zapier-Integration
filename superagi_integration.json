{
  "version": "1.0.0",
  "platformVersion": "15.0.1",
  "authentication": {
    "type": "custom",
    "test": {
      "source": "const options = {\n  url: 'https://app.superagi.com/api/v1/',\n  method: 'POST',\n  headers: {\n    'X-API-KEY': bundle.authData.api_key,\n    'Content-Type': \"application/json\"\n  },\n  \n  // params: {\n\n  // },\n  // body: JSON.stringify({\n  //   run_ids: []\n  // })\n}\nreturn new Promise(r=>r(true)); \n// return z.request(options)\n//   .then((response) => {\n//     response.throwForStatus();\n//     const results = response.json;\n\n//     // You can do any parsing you need for results here before returning them\n\n//     return results;\n//   });"
    },
    "fields": [
      {
        "computed": false,
        "key": "api_key",
        "required": true,
        "label": "API Key",
        "type": "string",
        "helpText": "Find your API key on https://app.superagi.com\nClick the gear icon on the upper right, then click API keys, then press create key. Then copy the key it generates and paste it in this box.\n"
      }
    ],
    "customConfig": {}
  },
  "creates": {
    "SuperAGI_create_agent": {
      "display": {
        "description": "Create an Agent using SuperAGI API",
        "hidden": false,
        "label": "Create and Run Agent"
      },
      "key": "SuperAGI_create_agent",
      "noun": "Agent",
      "operation": {
        "inputFields": [
          {
            "key": "goal",
            "label": "Goal(s)",
            "type": "string",
            "helpText": "Goals are the clear objectives you want the AI agent to reach. Think of these as the desired outcomes of the agent's actions. For instance, a goal might be \"Highlight primary customer concerns.\" It's essential to be precise to ensure the agent understands its purpose.\n[Read more about Agent Goals](https://superagi.com/docs/Core%20Components/Agents/agent_provisioning#goals)",
            "required": true,
            "list": true,
            "altersDynamicFields": false
          },
          {
            "key": "instructions",
            "label": "Instruction(s)",
            "type": "string",
            "helpText": "Instructions serve as the roadmap for the agent, guiding it step-by-step toward achieving the set goals. Offering detailed and sequential directions, such as \"First, categorize feedback, then identify recurring themes,\" ensures the agent can operate efficiently and effectively.\n\n[Read more about Agent Instructions](https://superagi.com/docs/Core%20Components/Agents/agent_provisioning#instructions)",
            "required": false,
            "list": true,
            "altersDynamicFields": false
          },
          {
            "key": "tools",
            "label": "Tool(s)",
            "type": "string",
            "helpText": "Tools refer to the specific software, platforms, or utilities at the agent's disposal. By clarifying preferred tools and their applications, like \"CodingToolkit\" you equip the agent with the necessary resources to execute its tasks successfully.\n\n[Review the tools available on SuperAGI](https://superagi.com/docs/Toolkit/)",
            "choices": [
              "CodingToolkit",
              "DuckDuckGo Search Toolkit",
              "File Toolkit",
              "Knowledge Search Toolkit",
              "Searx Toolkit",
              "Web Scraper Toolkit",
              "Email Toolkit*",
              "GitHub Toolkit*",
              "Google Calendar Toolkit*",
              "Google Search Toolkit*",
              "Google SERP Toolkit*",
              "Image Generation Toolkit*",
              "Jira Toolkit*",
              "Slack Toolkit*",
              "Twitter Toolkit*",
              "Notion Toolkit*",
              "Instagram Toolkit*"
            ],
            "required": false,
            "list": true,
            "altersDynamicFields": false
          },
          {
            "key": "agent_workflow",
            "label": "Advanced - Agent Workflow",
            "type": "string",
            "helpText": "SuperAGI supports a few different kinds of agents. Goal based wokflow is the best for most cases.\n\n[Learn more about Agent Types](https://superagi.com/docs/Core%20Components/Agents/agent_type)",
            "choices": [
              "Goal Based Workflow",
              "Dynamic Task Workflow",
              "Fixed Task Workflow"
            ],
            "default": "Goal Based Workflow",
            "required": true,
            "list": false,
            "altersDynamicFields": false
          },
          {
            "key": "constraints",
            "label": "Advanced - Constraint(s)",
            "type": "string",
            "helpText": "Constraints are specific guardrails within which the Agent has to operate. These constraints ensure that the agent operates within the set environment and guidelines are met.\n\nConstraints are pre-defined while creating an agent. However, you can change the constraints if required to better optimize the agent’s behavior.\n\n[Read about Constraints](https://superagi.com/docs/Core%20Components/Agents/agent_provisioning#constraints)",
            "required": false,
            "list": true,
            "altersDynamicFields": false
          },
          {
            "key": "iteration_interval",
            "label": "Advanced - Iteration Interval",
            "type": "integer",
            "helpText": "Milliseconds to wait between each re-attempt to accomplish the goal.",
            "default": "500",
            "required": true,
            "list": false,
            "altersDynamicFields": false
          },
          {
            "key": "model",
            "label": "Advanced - Model",
            "type": "string",
            "helpText": "While creating an agent, you can select the Large Language Model of choice with which you would like to deploy your agent.\n\nAs of now, SuperAGI currently supports OpenAI’s GPT 3.5-Turbo, GPT 3.5-Turbo-16k, GPT-4\n\n[Read about models that SuperAGI supports](https://superagi.com/docs/Core%20Components/Agents/agent_provisioning#models)",
            "choices": [
              "gpt-4",
              "gpt-3.5-turbo",
              "gpt-3.5-turbo-16k"
            ],
            "default": "gpt-3.5-turbo",
            "required": true,
            "list": false,
            "altersDynamicFields": false
          },
          {
            "key": "max_iterations",
            "label": "Advanced - Max Iterations",
            "type": "integer",
            "helpText": "Maximum Iterations are pre-defined iteration limits that are set for the agent. Since it can get expensive to run LLMs and it is possible for the Agent to hallucinate, you can set the number of iterations within which the agents have to operate.\n\n[Read about Maximum Iterations](https://superagi.com/docs/Core%20Components/Agents/agent_provisioning#maximum-iterations)",
            "default": "25",
            "required": true,
            "list": false,
            "altersDynamicFields": false
          }
        ],
        "sample": {
          "run_id": 16537,
          "agent_id": 9729
        },
        "outputFields": [
          {
            "key": "run_id",
            "type": "integer",
            "label": "Run ID"
          },
          {
            "key": "agent_id",
            "label": "Agent ID",
            "type": "integer"
          }
        ],
        "perform": {
          "source": "const tools = bundle.inputData.tools?bundle.inputData.tools.map(tool=>({name: tool.replace('*',\"\")})):[];\nconst agent_name = 'Zapier Agent ' + new Date().toISOString();\nlet constraints = bundle.inputData.constraints;\nif (!constraints){\n  constraints = [\n    \"If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember.\",\n    \"Ensure the tool and args are as per current plan and reasoning\",\n    'Exclusively use the tools listed under \"TOOLS\"',\n    'REMEMBER to format your response as JSON, using double quotes (\"\") around keys and string values, and commas (,) to separate items in arrays and objects. IMPORTANTLY, to use a JSON object as a string in another JSON object, you need to escape the double quotes.'\n    ];\n}\n\nconst options = {\n  // url: 'https://webhook.site/c7f9c205-d02b-45e4-9bb5-58407fad3e7f',\n  url: 'https://app.superagi.com/api/v1/agent',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'X-API-KEY': bundle.authData.api_key\n  },\n  params: {\n    // 'api_key': bundle.authData.api_key\n  },\n  body: {\n    'name': agent_name,\n    'description': \"Created from Zapier\",\n    'goal': bundle.inputData.goal,\n    'agent_workflow': bundle.inputData.agent_workflow,\n    'constraints': constraints,\n    'instruction': bundle.inputData.instructions?bundle.inputData.instructions:[],\n    'tools': tools,\n    'iteration_interval': bundle.inputData.iteration_interval,\n    'model': bundle.inputData.model,\n    'max_iterations': bundle.inputData.max_iterations,\n    // 'schedule': {\n    //   start_time: new Date().toISOString(),\n    //   expiry_runs: 1\n    // }\n  }\n}\n\nreturn z.request(options)\n  .then((response) => {\n    response.throwForStatus();\n    const results = response.json;\n    const agent_id = results.agent_id;\n    return z.request({\n      url: `https://app.superagi.com/api/v1/agent/${agent_id}/run`,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-API-KEY': bundle.authData.api_key\n      },\n      body:{}\n    }) .then((response) => {\n    response.throwForStatus();\n    const run_result = response.json;\n    const run_id = run_result.run_id;\n    \n    return {\n      agent_name, run_id, agent_id\n    };  \n    })\n    \n    // You can do any parsing you need for results here before returning them\n    \n  });"
        }
      }
    }
  }
}
